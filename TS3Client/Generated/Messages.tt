// TS3Client - A free TeamSpeak3 client implementation
// Copyright (C) 2017  TS3Client contributors
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the Open Software License v. 3.0
//
// You should have received a copy of the Open Software License along with this
// program. If not, see <https://opensource.org/licenses/OSL-3.0>.

<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ include file="MessageParser.ttinclude" once="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

namespace TS3Client.Messages
{
	using Commands;
	using Helper;
	using System;
	using System.Globalization;

	<#= ConversionSet #>
<#
var gen = Messages.Parse(Host.ResolvePath("../Declarations/Messages.toml"));

string GenerateDeserializer(Messages.Field fld)
{
	if(fld.isArray)
		return $"{{ if(value.Length == 0) {fld.pretty} = Array.Empty<{fld.type}>(); else {{"
			 + $" var ss = new SpanSplitter(); ss.First(value, ',');"
			 + $" int cnt = 0; for (int i = 0; i < value.Length; i++) if (value[i] == ',') cnt++;"
			 + $" {fld.pretty} = new {fld.type}[cnt + 1];"
			 + $" for(int i = 0; i < cnt + 1; i++) {{ {GenerateSingleDeserializer(fld, "ss.Trim(value)", fld.pretty + "[i]")} if (i < cnt) value = ss.Next(value); }} }} }}";
	else
		return GenerateSingleDeserializer(fld, "value", fld.pretty);
}

Dictionary<string, string> BackingTypes = new Dictionary<string, string>() {
	{ "Codec", "u8" },
	{ "Ts3ErrorCode", "u32" },
	{ "LicenseType", "u16" },
};

string GenerateSingleDeserializer(Messages.Field fld, string input, string output)
{
	switch (fld.type)
	{
	case "bool":
		return $"{output} = {input}.Length > 0 && {input}[0] != '0';";
	case "i8":
	case "u8":
	case "i16":
	case "u16":
	case "i32":
	case "u32":
	case "i64":
	case "u64":
	case "f32":
	case "f64":
	case "ClientDbId":
	case "ClientId":
	case "ChannelId":
	case "ServerGroupId":
	case "ChannelGroupId":
		return $"{output} = {fld.type}.Parse({input}.NewString(), CultureInfo.InvariantCulture);";
	case "DurationSeconds":
		return $"{output} = TimeSpan.FromSeconds(double.Parse({input}.NewString(), CultureInfo.InvariantCulture));";
	case "DurationMilliseconds":
		return $"{output} = TimeSpan.FromMilliseconds(double.Parse({input}.NewString(), CultureInfo.InvariantCulture));";
	case "DateTime":
		return $"{output} = Util.UnixTimeStart.AddSeconds(double.Parse({input}.NewString(), CultureInfo.InvariantCulture));";
	case "str":
	case "Uid":
		return $"{output} = Ts3String.Unescape({input});";
	case "HostMessageMode":
	case "CodecEncryptionMode":
	case "HostBannerMode":
	case "Reason":
	case "ClientType":
	case "TextMessageTargetMode":
	case "GroupType":
	case "GroupNamingMode":
		return $"{{ if (!Enum.TryParse({input}.NewString(), out {fld.type} val)) throw new FormatException(); {output} = val; }}";
	case "Codec":
	case "Ts3ErrorCode":
	case "LicenseType":
	case "PermissionId":
		if(!BackingTypes.TryGetValue(fld.type, out var backType))
			backType = "i32";
		return $"{output} = ({fld.type}){backType}.Parse({input}.NewString(), CultureInfo.InvariantCulture);";
	case "IconHash":
		return $"{output} = unchecked((int)long.Parse({input}.NewString(), CultureInfo.InvariantCulture));";
	default:
		Warn($"Missing deserializer for {fld.type}");
		return "";
	}
}

foreach(var msg in gen.GetOrderedMsg())
{
	//if(!msg.s2c.Value) continue;
#>
	public sealed class <#= msg.name #><#
		bool isNotify = msg.notify != null;
		bool isResponse = msg.response.Value;
		if (isNotify && isResponse) Write(" : INotification, IResponse");
		else if (isNotify) Write(" : INotification");
		else if (isResponse) Write(" : IResponse");
	#>
	{
		<#= isNotify ? "public NotificationType NotifyType { get; } = NotificationType." + msg.name + ";" : "" #>
		<#= isResponse ? "public string ReturnCode { get; set; }" : "" #>
<#
	foreach (var (genField, optional) in msg.attributes.Select(f => gen.GetField(f))) { #>
		public <#= genField.typeFin #> <#= genField.pretty #> { get; set; }<# } #>

		public void SetField(string name, ReadOnlySpan<char> value)
		{
<#
		if (msg.attributes.Length > 0) { #>
			switch(name)
			{
<#
		foreach (var (genField, optional) in msg.attributes.Select(f => gen.GetField(f))) {
#>
			case "<#= genField.ts #>": <#= GenerateDeserializer(genField) #> break;<#
			}
#>
			<#= isResponse ? ("case \"return_code\": " + GenerateDeserializer(gen.GetField("return_code").fld) + " break;") : "" #>
			}
<#
			} #>
		}
	}
<# } #>
	public enum NotificationType
	{
		Unknown,<#
	foreach(var ntfy in gen.NotifiesSorted) {
		/*if(!ntfy.s2c.Value) continue;*/ #>
		///<summary><#= ntfy.s2c.Value ? "[S2C] " : "" #><#= ntfy.c2s.Value ? "[C2S] " : "" #>ntfy:<#= ntfy.notify #></summary>
		<#= ntfy.name #>,<#
	}
#>
	}

	public static class MessageHelper
	{
		public static NotificationType GetNotificationType(string name)
		{
			switch(name)
			{<#
	foreach(var ntfy in gen.NotifiesSorted) { 
		/*if(!ntfy.s2c.Value) continue;*/ #>
			case "<#= ntfy.notify #>": return NotificationType.<#= ntfy.name #>;<#
	}
#>
			default: return NotificationType.Unknown;
			}
		}

		public static INotification GenerateNotificationType(NotificationType name)
		{
			switch(name)
			{<#
	foreach(var ntfy in gen.NotifiesSorted)
	{
		/*if(!ntfy.s2c.Value) continue;*/
#>
			case NotificationType.<#= ntfy.name #>: return new <#= ntfy.name #>();<#
	}
#>
			case NotificationType.Unknown:
			default: throw Util.UnhandledDefault(name);
			}
		}
	}
}